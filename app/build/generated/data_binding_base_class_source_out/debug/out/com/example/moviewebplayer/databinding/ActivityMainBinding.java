// Generated by view binder compiler. Do not edit!
package com.example.moviewebplayer.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.webkit.WebView;
import android.widget.FrameLayout;
import android.widget.ProgressBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.moviewebplayer.R;
import com.google.android.exoplayer2.ui.PlayerView;
import com.google.android.material.appbar.MaterialToolbar;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.materialswitch.MaterialSwitch;
import com.google.android.material.tabs.TabLayout;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMainBinding implements ViewBinding {
  @NonNull
  private final FrameLayout rootView;

  @NonNull
  public final MaterialSwitch adblockSwitch;

  @NonNull
  public final MaterialButton closePlayerBtn;

  @NonNull
  public final MaterialButton closeSourcesBtn;

  @NonNull
  public final MaterialButton detectBtn;

  @NonNull
  public final TextView emptyText;

  @NonNull
  public final MaterialButton openBtn;

  @NonNull
  public final ProgressBar pageProgress;

  @NonNull
  public final FrameLayout playerOverlay;

  @NonNull
  public final PlayerView playerView;

  @NonNull
  public final RecyclerView sourcesList;

  @NonNull
  public final MaterialCardView sourcesPanel;

  @NonNull
  public final TextView sourcesTitle;

  @NonNull
  public final SwipeRefreshLayout swipeRefresh;

  @NonNull
  public final TabLayout tabLayout;

  @NonNull
  public final MaterialToolbar topAppBar;

  @NonNull
  public final TextInputEditText urlInput;

  @NonNull
  public final TextInputLayout urlInputLayout;

  @NonNull
  public final FrameLayout webContainer;

  @NonNull
  public final WebView webView;

  private ActivityMainBinding(@NonNull FrameLayout rootView, @NonNull MaterialSwitch adblockSwitch,
      @NonNull MaterialButton closePlayerBtn, @NonNull MaterialButton closeSourcesBtn,
      @NonNull MaterialButton detectBtn, @NonNull TextView emptyText,
      @NonNull MaterialButton openBtn, @NonNull ProgressBar pageProgress,
      @NonNull FrameLayout playerOverlay, @NonNull PlayerView playerView,
      @NonNull RecyclerView sourcesList, @NonNull MaterialCardView sourcesPanel,
      @NonNull TextView sourcesTitle, @NonNull SwipeRefreshLayout swipeRefresh,
      @NonNull TabLayout tabLayout, @NonNull MaterialToolbar topAppBar,
      @NonNull TextInputEditText urlInput, @NonNull TextInputLayout urlInputLayout,
      @NonNull FrameLayout webContainer, @NonNull WebView webView) {
    this.rootView = rootView;
    this.adblockSwitch = adblockSwitch;
    this.closePlayerBtn = closePlayerBtn;
    this.closeSourcesBtn = closeSourcesBtn;
    this.detectBtn = detectBtn;
    this.emptyText = emptyText;
    this.openBtn = openBtn;
    this.pageProgress = pageProgress;
    this.playerOverlay = playerOverlay;
    this.playerView = playerView;
    this.sourcesList = sourcesList;
    this.sourcesPanel = sourcesPanel;
    this.sourcesTitle = sourcesTitle;
    this.swipeRefresh = swipeRefresh;
    this.tabLayout = tabLayout;
    this.topAppBar = topAppBar;
    this.urlInput = urlInput;
    this.urlInputLayout = urlInputLayout;
    this.webContainer = webContainer;
    this.webView = webView;
  }

  @Override
  @NonNull
  public FrameLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.adblockSwitch;
      MaterialSwitch adblockSwitch = ViewBindings.findChildViewById(rootView, id);
      if (adblockSwitch == null) {
        break missingId;
      }

      id = R.id.closePlayerBtn;
      MaterialButton closePlayerBtn = ViewBindings.findChildViewById(rootView, id);
      if (closePlayerBtn == null) {
        break missingId;
      }

      id = R.id.closeSourcesBtn;
      MaterialButton closeSourcesBtn = ViewBindings.findChildViewById(rootView, id);
      if (closeSourcesBtn == null) {
        break missingId;
      }

      id = R.id.detectBtn;
      MaterialButton detectBtn = ViewBindings.findChildViewById(rootView, id);
      if (detectBtn == null) {
        break missingId;
      }

      id = R.id.emptyText;
      TextView emptyText = ViewBindings.findChildViewById(rootView, id);
      if (emptyText == null) {
        break missingId;
      }

      id = R.id.openBtn;
      MaterialButton openBtn = ViewBindings.findChildViewById(rootView, id);
      if (openBtn == null) {
        break missingId;
      }

      id = R.id.pageProgress;
      ProgressBar pageProgress = ViewBindings.findChildViewById(rootView, id);
      if (pageProgress == null) {
        break missingId;
      }

      id = R.id.playerOverlay;
      FrameLayout playerOverlay = ViewBindings.findChildViewById(rootView, id);
      if (playerOverlay == null) {
        break missingId;
      }

      id = R.id.playerView;
      PlayerView playerView = ViewBindings.findChildViewById(rootView, id);
      if (playerView == null) {
        break missingId;
      }

      id = R.id.sourcesList;
      RecyclerView sourcesList = ViewBindings.findChildViewById(rootView, id);
      if (sourcesList == null) {
        break missingId;
      }

      id = R.id.sourcesPanel;
      MaterialCardView sourcesPanel = ViewBindings.findChildViewById(rootView, id);
      if (sourcesPanel == null) {
        break missingId;
      }

      id = R.id.sourcesTitle;
      TextView sourcesTitle = ViewBindings.findChildViewById(rootView, id);
      if (sourcesTitle == null) {
        break missingId;
      }

      id = R.id.swipeRefresh;
      SwipeRefreshLayout swipeRefresh = ViewBindings.findChildViewById(rootView, id);
      if (swipeRefresh == null) {
        break missingId;
      }

      id = R.id.tabLayout;
      TabLayout tabLayout = ViewBindings.findChildViewById(rootView, id);
      if (tabLayout == null) {
        break missingId;
      }

      id = R.id.topAppBar;
      MaterialToolbar topAppBar = ViewBindings.findChildViewById(rootView, id);
      if (topAppBar == null) {
        break missingId;
      }

      id = R.id.urlInput;
      TextInputEditText urlInput = ViewBindings.findChildViewById(rootView, id);
      if (urlInput == null) {
        break missingId;
      }

      id = R.id.urlInputLayout;
      TextInputLayout urlInputLayout = ViewBindings.findChildViewById(rootView, id);
      if (urlInputLayout == null) {
        break missingId;
      }

      id = R.id.webContainer;
      FrameLayout webContainer = ViewBindings.findChildViewById(rootView, id);
      if (webContainer == null) {
        break missingId;
      }

      id = R.id.webView;
      WebView webView = ViewBindings.findChildViewById(rootView, id);
      if (webView == null) {
        break missingId;
      }

      return new ActivityMainBinding((FrameLayout) rootView, adblockSwitch, closePlayerBtn,
          closeSourcesBtn, detectBtn, emptyText, openBtn, pageProgress, playerOverlay, playerView,
          sourcesList, sourcesPanel, sourcesTitle, swipeRefresh, tabLayout, topAppBar, urlInput,
          urlInputLayout, webContainer, webView);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
